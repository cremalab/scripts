// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`new:component with example and with state generates component with expected files 1`] = `
"C
├── README.md
├── index.tsx
├── stories.tsx
└── test.tsx
"
`;

exports[`new:component with example and with state generates directory with expected \`README.md\` contents 1`] = `
"# \`<C />\`

DESCRIPTION_HERE

## Directory Structure

- \`stories.tsx\`: Component playground (\`npm run test:playground\`)
- \`test.tsx\`: Component tests (\`npm run test:unit\`)
- \`index.tsx\`: Component code
- \`README.md\`: Component documentation (hey, that's me!)

## Example

![C](../../../.loki/reference/chrome_C_example.png)

> Image location: [\`.loki/reference/chrome_C_example.png\`](../../../.loki/reference/chrome_C_example.png)
> 
> To regenerate: 
> 1. \`npm run test:playground\` (skip if running)
> 1. \`npm run test:visual:update -- --storiesFilter=\\"^C example\\\\$\\"\`
"
`;

exports[`new:component with example and with state generates directory with expected \`index.tsx\` contents 1`] = `
"import { useState } from \\"react\\"

type Props = Readonly<{}>

export function C(_: Props) {
  const [count, setCount] = useState(0)

  return (
    <div>
      <p>You clicked {count} times</p>
      <button onClick={() => setCount(count + 1)}>Click Me</button>
    </div>
  )
}
"
`;

exports[`new:component with example and with state generates directory with expected \`stories.tsx\` contents 1`] = `
"import React from \\"react\\"
import decoratorCentered from \\"@storybook/addon-centered\\"
import { C } from \\".\\"

/**
 * See Storybook Docs: Writing Stories
 * https://storybook.js.org/docs/basics/writing-stories/
 */

export default {
  title: \\"C\\",
  decorators: [decoratorCentered],
}

export const example = () => <C />
"
`;

exports[`new:component with example and with state generates directory with expected \`test.tsx\` contents 1`] = `
"import { C } from \\".\\"
import { render, fireEvent } from \\"@testing-library/react\\"
import React from \\"react\\"

describe(\\"C\\", () => {
  it(\\"has correct message before clicking\\", () => {
    // Arrange
    const message = \\"You clicked 0 times\\"

    // Act
    const { getByText } = render(<C />)
    const received = getByText(message)

    // Assert
    expect(received).toBeDefined()
  })

  it(\\"has correct message after clicking\\", () => {
    // Arrange
    const buttonText = \\"Click Me\\"
    const message = \\"You clicked 1 times\\"

    // Act
    const { getByText } = render(<C />)
    const button = getByText(buttonText)
    fireEvent.click(button)
    const received = getByText(message)

    // Assert
    expect(received).toBeDefined()
  })
})
"
`;

exports[`new:component with example but without state generates component with expected files 1`] = `
"B
├── README.md
├── index.tsx
├── stories.tsx
└── test.tsx
"
`;

exports[`new:component with example but without state generates directory with expected \`README.md\` contents 1`] = `
"# \`<B />\`

DESCRIPTION_HERE

## Directory Structure

- \`stories.tsx\`: Component playground (\`npm run test:playground\`)
- \`test.tsx\`: Component tests (\`npm run test:unit\`)
- \`index.tsx\`: Component code
- \`README.md\`: Component documentation (hey, that's me!)

## Example

![B](../../../.loki/reference/chrome_B_example.png)

> Image location: [\`.loki/reference/chrome_B_example.png\`](../../../.loki/reference/chrome_B_example.png)
> 
> To regenerate: 
> 1. \`npm run test:playground\` (skip if running)
> 1. \`npm run test:visual:update -- --storiesFilter=\\"^B example\\\\$\\"\`
"
`;

exports[`new:component with example but without state generates directory with expected \`index.tsx\` contents 1`] = `
"type Props = Readonly<{}>

export function B(_: Props) {
  return (
    <div>
      <p>B</p>
    </div>
  )
}
"
`;

exports[`new:component with example but without state generates directory with expected \`stories.tsx\` contents 1`] = `
"import React from \\"react\\"
import decoratorCentered from \\"@storybook/addon-centered\\"
import { B } from \\".\\"

/**
 * See Storybook Docs: Writing Stories
 * https://storybook.js.org/docs/basics/writing-stories/
 */

export default {
  title: \\"B\\",
  decorators: [decoratorCentered],
}

export const example = () => <B />
"
`;

exports[`new:component with example but without state generates directory with expected \`test.tsx\` contents 1`] = `
"import { B } from \\".\\"
import { render } from \\"@testing-library/react\\"
import React from \\"react\\"

describe(\\"B\\", () => {
  it(\\"name prop is rendered\\", () => {
    // Arrange
    const name = \\"B\\"

    // Act
    const { getByText } = render(<B />)
    const received = getByText(name)

    // Assert
    expect(received).toBeDefined()
  })
})
"
`;

exports[`new:component without example code generates directory with expected \`README.md\` contents 1`] = `
"# \`<A />\`

DESCRIPTION_HERE

## Directory Structure

- \`stories.tsx\`: Component playground (\`npm run test:playground\`)
- \`test.tsx\`: Component tests (\`npm run test:unit\`)
- \`index.tsx\`: Component code
- \`README.md\`: Component documentation (hey, that's me!)

## Example

![A](../../../.loki/reference/chrome_A_example.png)

> Image location: [\`.loki/reference/chrome_A_example.png\`](../../../.loki/reference/chrome_A_example.png)
> 
> To regenerate: 
> 1. \`npm run test:playground\` (skip if running)
> 1. \`npm run test:visual:update -- --storiesFilter=\\"^A example\\\\$\\"\`
"
`;

exports[`new:component without example code generates directory with expected \`index.tsx\` contents 1`] = `
"export function A() {
  return <></>
}
"
`;

exports[`new:component without example code generates directory with expected \`stories.tsx\` contents 1`] = `
"import React from \\"react\\"
import decoratorCentered from \\"@storybook/addon-centered\\"
import { A } from \\".\\"

/**
 * See Storybook Docs: Writing Stories
 * https://storybook.js.org/docs/basics/writing-stories/
 */

export default {
  title: \\"A\\",
  decorators: [decoratorCentered],
}

export const example = () => <A />
"
`;

exports[`new:component without example code generates directory with expected \`test.tsx\` contents 1`] = `
"import { A } from \\".\\"
import React from \\"react\\"

describe(\\"A\\", () => {
  it.todo(\`A needs to be tested\`)
})
"
`;

exports[`new:component without example code generates directory with expected files 1`] = `
"A
├── README.md
├── index.tsx
├── stories.tsx
└── test.tsx
"
`;
